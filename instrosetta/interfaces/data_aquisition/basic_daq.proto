syntax = "proto3";

package instrosetta.interfaces.data_aquisition.basic_daq.v1;


service BasicDaq {
    
    rpc GetAvailbleDevices(GetAvailbleDevicesRequest) returns (stream GetAvailbleDevicesResponse) {}
    rpc Initialize(InitializeRequest) returns (InitializeResponse) {}
    rpc Shutdown(ShutdownRequest) returns (ShutdownResponse) {}

    rpc ReadDigital(ReadDigitalRequest) returns (ReadDigitalResponse) {}
    rpc ReadAnalog(ReadAnalogRequest) returns (ReadAnalogResponse) {}
    rpc WriteDigital(WriteDigitalRequest) returns (WriteDigitalResponse) {}
    rpc WriteAnalog(WriteAnalogRequest) returns (WriteAnalogResponse) {}
    
    rpc GetDeviceDetails(GetDeviceDetailsRequest) returns (GetDeviceDetailsResponse) {}
    rpc GetDigitalChannels(GetDigitalChannelsRequest) returns (GetDigitalChannelsResponse) {}
    rpc GetAnalogChannels(GetAnalogChannelsRequest) returns (GetAnalogChannelsResponse) {}
    
    rpc SetChannelMode(SetChannelModeRequest) returns (SetChannelModeResponse) {}

    
}

// The first property of all messages is called "name" and reserved for
// a unique identifier of the request-response session.
// How the uid is generated is implementation specific and should not be relied on for functionality.


message GetAvailbleDevicesRequest {
    string name = 1;
}

message GetAvailbleDevicesResponse {
    string name = 1;
}

message InitializeRequest {
    string name = 1;
    map <string, string> properties = 2;

}

message InitializeResponse {
    string name = 1;
    bool success = 2;
}

message ShutdownRequest {
    string name = 1;
}

message ShutdownResponse {
    string name = 1;
    bool success = 2;
}


message ReadDigitalRequest {
    string name = 1; 
}

message ReadDigitalResponse {
    string name = 1; 
    bool value = 2;
}
message ReadAnalogRequest {
    string name = 1; 
}

message ReadAnalogResponse {
    string name = 1; 
    double value = 2;
}
message WriteDigitalRequest {
    string name = 1; 
    bool value = 2;
}

message WriteDigitalResponse {
    string name = 1;
    bool value = 2;
}
message WriteAnalogRequest {
    string name = 1; 
    double value = 2;
}

message WriteAnalogResponse {
    string name = 1; 
    double value = 2;
}

message GetDeviceDetailsRequest {
    string name = 1;
    string device = 2;
}

message GetDeviceDetailsResponse {
    string name = 1;
    map <string, string> details = 2;
}


message GetDigitalChannelsRequest {
    string name = 1;
   
}

message GetDigitalChannelsResponse {
    string name = 1;
    int32 number = 2;
    repeated string names = 3;
}


message GetAnalogChannelsRequest {
    string name = 1;
    string units = 2;
}

message GetAnalogChannelsResponse {
    string name = 1;
    int32 number = 2;
    repeated string names = 3;
}

enum ChannelMode {
    UNKNOWN = 0;
    INPUT = 1;
    OUTPUT = 2;
}

message SetChannelModeRequest {
    string name = 1;
    string channel_name  = 2;
    string channel_uid = 3;
    ChannelMode mode = 4;
}

message SetChannelModeResponse {
    string name = 1;
    string channel_name  = 2;
    string channel_uid = 3;
    ChannelMode mode = 4;
}


message GetChannelModeRequest {
    string name = 1;
    string channel_name  = 2;
    string channel_uid = 3; 
}

message GetChannelModeResponse {
    string name = 1;
    string channel_name  = 2;
    string channel_uid = 3;
    ChannelMode mode = 4;
}
